generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql" // 数据库引擎，可以切换为其他引擎
  url      = env("DATABASE_URL") // 数据库连接配置
}

// 用户表
model User {
  id           Int      @id @default(autoincrement())
  userId       String   @unique // 用户的id
  points       Int?     @default(0)
  isChecked    Boolean? @default(false)
  lastCheckIn  String?
  level        String   @default("1")
  createdAt    String? // 使用 Prisma 默认的方式存储日期时间
  updatedAt    String? // 用户数据更新的时间
  lastLoginAt  String? // 用户上一次登陆的时间
  userHeadPic  String?
  userName     String?
  openid       String?  @unique
  loraName     String?//用户lora名字
  loraPic      String?//数字人图片,展示在主页
  loraStatus   String? //数字人状态：pending（制作中）、done（训练完成）、error（训练异常）
  userTrainPic String?//数字人对应的训练数据图片
  userGender   String?//数字人性别
}

model UserProcessImageData {
  userId           String // 用户的id
  mainImagePath    String?
  roopImagePath    String?
  img2imgreqData   String?// 存储JSON格式的img2imgreq数据，在 Prisma 使用 String 表示 JSON
  outputImagePath  String?
  createdAt        String?
  beforProcessTime Float?
  processTime      Float?
  imageType        String?
  requestId        String  @id @unique// 在 Prisma 使用 @id 和 @unique 指令表示主键和唯一约束
  requestStatus    String? @default("no-data")
  userLikeStatus   Int?    @default(0)
  usePoint         Int?    @default(1)
  openid           String?  // 用户的wx openid
}

model SDRunningTasks {
  userId            String
  openid            String?
  mainImagePath     String?
  roopImagePath     String?
  img2imgreqData    String? @db.Text  // 存储JSON格式的img2imgreq数据，在 Prisma 使用 String 表示 JSON
  outputImagePath   String?
  createdAt         String?
  beforProcessTime  Float?
  processTime       Float?
  imageType         String?
  requestId         String  @id @unique
  requestStatus     String? @default("no-data")
  userLikeStatus    Int?    @default(0)
  usePoint          Int?    @default(1)//转换所需积分
  loraName          String?
  txt2imgreqData    String? @db.Text // 存储 JSON 格式的 txt2img 请求数据
  userTrainDataPath String?  //用户训练图像
}
model Tasks {
  requestId         String  @id @unique
  taskId           String   @default("")
  userId            String
  createdAt         String?
  taskType         String?
  status     String? @default("waiting")
  usePoint          Int?    @default(1)//转换所需积分
  data              String? @db.Text
  sdParams          String? @db.LongText
}
model UserLog {
  id     Int    @id @default(autoincrement())
  userId String
  log    String
}

model ImageIndex {
  id          Int     @id @default(autoincrement())
  imageUrl    String?
  data        String? @db.Text
  description String?
  category    String?
  tags        String?
  createdAt   String?
  likesCount  Int     @default(0)
}

model ImageUserUpload {
  userId         String   @map("userId")// 映射到 User 表的 userId 字段
  momentId       String   @unique
  momentText     String // 朋友圈文案
  momentTitle    String    // 朋友圈文案标题
  momentPics     String // 以逗号分隔的图片 URL 字符串
  viewCount      Int      @default(0)
  createdAt      String?
  likesCount     Int      @default(0)
  userLikeStatus Boolean? @default(false)
  category       String?
  tagName        String?
  isChecked      Boolean? @default(false)
  userHeadPic    String?  @map("userHeadPic")// 映射到 User 表的 userHeadPic 字段
  userName       String?  @map("userName")// 映射到 User 表的 userName 字段
}
